<analysis>
The previous AI engineer initiated a Tracker Alerts System project, evolving it from a basic structure to a full-featured MVP. Initially, the project was misidentified as PostgreSQL-based from some files, but quickly adapted to MongoDB, then explicitly migrated to PostgreSQL Neon. Key challenges included backend database conversion, frontend port conflicts, and ensuring consistent data sharing and filtering logic across the stack. The engineer systematically addressed user requests, implementing features like user authentication, Gmail sync, bike/alert management, dynamic UI adjustments (dark mode, role-based views), and interactive components (history modal, admin dashboard). Debugging was methodical, involving API tests and log analysis. The most recent task involves a significant UI refactor using  components and investigating a cross-machine database connectivity issue.
</analysis>

<product_requirements>
The product is a Bike Tracker Alerts System designed to monitor bikes, primarily by syncing alerts from Gmail, providing a dashboard, and enabling user management.

**Initial State & Core Functionality:**
*   Full-stack application: React frontend, FastAPI backend.
*   Database: Started with MongoDB, then migrated to PostgreSQL Neon.
*   User Authentication: JWT-based login for admin and viewer roles.
*   Gmail Integration: Syncs bike tracker alerts from a configured Gmail account.

**Implemented Features & Improvements:**
*   **Database Migration:** Successful transition from MongoDB to PostgreSQL Neon, including schema creation and data integrity.
*   **User & Role Management:** Admin dashboard provides CRUD operations for users. Admin and viewer accounts share the same alerts/bikes database. Viewer accounts have restricted UI, excluding admin-specific sections.
*   **Alert & Bike Tracking:** Displays alerts grouped by bikes on the dashboard, with a pagination mechanism (showing up to 6 bikes with Show More/Less). New alerts bring the associated bike to the top when filtered by newest first.
*   **Bike History:** Clicking a bike opens a modal displaying its alert history, sorted by newest first, with correct timestamps. Users can add, edit, and delete notes for each bike, with author attribution.
*   **Filtering:** Frontend-only date filtering for alerts, supporting DD/MM/YYYY HH:MM timestamp format, with an explicit Apply Filter button.
*   **Alert Categorization:** Categorizes alerts (e.g., Light Sensor, No Communication, Over-turn, Heavy Impact). Crash Detected is a sensitive frontend-defined category (requires over-turn AND heavy impact for the same bike) with a prominent pop-up.
*   **UI/UX:** System-wide dark mode toggle integrated into the sidebar. Removed Export CSV and Update All Emails buttons (replaced by Refresh Alerts, then removed with date picker in favor of new filter).
*   **Performance:** General improvements to system speed and responsiveness.

**Current Pending Refactoring:**
*   Complete UI overhaul to  components for tables, calendars, and cards.
*   Investigate and resolve database connectivity issues specific to cross-machine access for Gmail sync.
</product_requirements>

<key_technical_concepts>
-   **Frontend:** React, Tailwind CSS, , ,  (upcoming).
-   **Backend:** FastAPI, Python, PostgreSQL (Neon), , ,  ().
-   **Database:** PostgreSQL Neon (previously MongoDB).
-   **Authentication:** JWT.
-   **Environment:** Kubernetes, Supervisor, Nginx,  for config.
-   **Integrations:** Gmail API (implicit for email parsing).
</key_technical_concepts>

<code_architecture>


-   ****
    -   **Summary of importance:** This is the FastAPI application entry point, handling all backend logic, API routing, database interactions, user authentication, and Gmail synchronization.
    -   **Summary of changes made:** Transformed from an initial PostgreSQL (then MongoDB) setup to PostgreSQL Neon. Implemented API endpoints for user authentication, alert/bike listing, bike history, Gmail sync, user CRUD, and bike note CRUD.  filtering was removed from core data endpoints to enable shared data. Corrected database queries and schema definitions.
-   ****
    -   **Summary of importance:** Stores critical backend environment variables, including PostgreSQL Neon database credentials and Gmail API credentials.
    -   **Summary of changes made:** Updated with PostgreSQL Neon connection string (PGHOST, PGDATABASE, PGUSER, PGPASSWORD, PGSSLMODE, PGCHANNELBINDING) and Gmail username/password.
-   ****
    -   **Summary of importance:** Lists all Python dependencies required for the FastAPI backend.
    -   **Summary of changes made:** Added , ,  (for password hashing);  was removed during the MongoDB-to-PostgreSQL migration.
-   ****
    -   **Summary of importance:** The central React component, managing overall UI layout, state, and frontend application logic. It orchestrates components and makes API calls.
    -   **Summary of changes made:** Implemented system-wide dark mode. Integrated role-based UI visibility. Refactored dashboard to show paginated bikes. Added  with note CRUD. Incorporated a full User Management UI into . Implemented frontend-only date filtering with DD/MM/YYYY HH:MM timestamp parsing. Removed/renamed several buttons. Fixed numerous compilation and runtime errors.
-   ****
    -   **Summary of importance:** Stores frontend environment variables, crucially  for API communication.
    -   **Summary of changes made:** Ensured  is correctly configured and utilized.
-   ****
    -   **Summary of importance:** Used to extend and override the default Create React App configuration.
    -   **Summary of changes made:** Modified to explicitly set the development server port to , resolving a conflict where the app would default to port .
-   ****
    -   **Summary of importance:** Manages Node.js dependencies and scripts for the React frontend.
    -   **Summary of changes made:** Added  (though now being replaced), .  related dependencies were in the process of being added.
</code_architecture>

<pending_tasks>
-   Replace the current alert table and calendar filter components with  components.
-   Investigate and fix the database connectivity issue (Gmail sync) when the application is accessed from other machines/browsers.
-   Replace existing UI cards with  card components.
-   Ensure the system maintains its current architecture but adopts a new, lighter, and more responsive  structure without performance issues.
-   Save current progress to GitHub (as the user reiterated this).
</pending_tasks>

<current_work>
Immediately prior to this summary request, the previous AI engineer was initiating a major refactoring effort of the frontend UI to use  components. The user provided explicit code snippets for a  Calendar and Table, along with instructions to completely replace the existing components. The engineer had just started this process by installing the  dependency, which is a core component of the  Calendar. The user then prompted to save the current progress to GitHub.
</current_work>

<optional_next_step>
Proceed with installing the  Calendar and Table components as provided by the user.
</optional_next_step>
